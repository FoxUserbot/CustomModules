import asyncio
from pyrogram import Client, filters
from command import fox_command
import os

translate_map = {
    ord("–∑"): "Z",
    ord("–ó"): "Z",
    ord("z"): "Z",
    ord("–æ"): "O",
    ord("o"): "–û",
    ord("–≤"): "V",
    ord("–í"): "V",
    ord("v"): "V"
}

patriot_enabled = False

@Client.on_message(fox_command("patriot", "–ü–∞—Ç—Ä–∏–æ—Ç", os.path.basename(__file__)) & filters.me)
async def patriotcmd(client, message):
    global patriot_enabled
    patriot_enabled = not patriot_enabled
    
    if patriot_enabled:
        return await message.edit("<b>üá∑üá∫ –ü–∞—Ç—Ä–∏–æ—Ç —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω. –°—Ç—Ä–∞–Ω–∞ –º–æ–∂–µ—Ç —Å–ø–∞—Ç—å —Å–ø–æ–∫–æ–π–Ω–æ</b>")
    else:
        return await message.edit("‚ùå <b>–ü–∞—Ç—Ä–∏–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω</b>")

@Client.on_message(fox_command("pat", "–ü–∞—Ç—Ä–∏–æ—Ç", os.path.basename(__file__), "[reply]") & filters.me)
async def patcmd(client, message):
    reply = message.reply_to_message
    if not reply:
        return await message.edit("<b>–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é </b><code>pat</code>")
    
    translated_text = reply.text.translate(translate_map)
    await message.edit(f"üá∑üá∫ <b>–ü–∞—Ç—Ä–∏–æ—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ</b>:\n\n{translated_text}")

@Client.on_message(filters.outgoing & filters.me)
async def watcher(client, message):
    if patriot_enabled:
        translated_text = message.text.translate(translate_map)
        if message.text != translated_text:
            await message.edit(translated_text)